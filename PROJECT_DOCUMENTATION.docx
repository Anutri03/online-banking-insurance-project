# Online Banking & Insurance System Documentation

## 1. Introduction
The Online Banking & Insurance System (FinSecure) is a modern web application designed to provide users with a seamless experience for managing their banking and insurance needs in one secure platform. The system is built using Python, Flask, SQLAlchemy, and features a beautiful, responsive UI with HTML, CSS, and JavaScript.

## 2. Project Purpose
The goal of this project is to:
- Enable users to manage multiple bank accounts (checking, savings, credit) and insurance policies (health, auto, home, life) from a single dashboard.
- Provide secure authentication, transaction management, and policy claims.
- Offer a user-friendly, attractive, and responsive interface for both desktop and mobile users.

## 3. Key Features
### Banking
- Create and manage multiple account types
- Deposit, withdraw, and transfer funds
- View transaction history and account statements
- Dashboard with financial statistics and charts

### Insurance
- Create and manage various insurance policies
- File and track insurance claims
- View policy details, renewals, and upcoming expirations
- Dashboard with policy statistics and visualizations

### General
- Secure user authentication (Flask-Login, JWT for API)
- Email notifications for important events
- User profile management
- RESTful API for third-party integrations
- Responsive, modern UI/UX

## 4. Technology Stack
- **Backend:** Python, Flask, Flask-SQLAlchemy, Flask-Migrate
- **Frontend:** HTML5, CSS3 (custom + Bootstrap 5), JavaScript (ES6+), jQuery
- **Database:** SQLite (development), PostgreSQL (production-ready)
- **Authentication:** Flask-Login, JWT
- **Email:** Flask-Mail
- **API:** RESTful endpoints with JWT authentication
- **Other:** Chart.js for data visualization, Flatpickr for date pickers

## 5. System Architecture
- **App Factory Pattern:** Modular Flask app with blueprints for main, auth, banking, insurance, and API routes.
- **Models:** User, BankAccount, Transaction, InsurancePolicy, InsuranceClaim, Notification, etc.
- **Forms:** WTForms for all user input (login, registration, transactions, claims, etc.)
- **Templates:** Jinja2 templates for all pages, with a shared base layout and reusable components.
- **Static Assets:** Organized CSS, JS, and image files for maintainability.

## 6. UI/UX Design & Enhancements
- **Modern, Clean Layout:** Uses Bootstrap 5 and custom CSS variables for a professional look.
- **Responsive Design:** Fully mobile-friendly, adapts to all screen sizes.
- **Navigation:** Sticky navbar with dropdowns for banking and insurance, user profile, and notifications.
- **Dashboard:** Visual stats cards, interactive charts (Chart.js), and quick actions.
- **Forms:** Styled with floating labels, validation, and password strength meter.
- **Notifications:** Real-time notification dropdown with badge counter.
- **Accessibility:** High-contrast colors, large clickable areas, and ARIA labels.
- **Animations:** Subtle transitions and hover effects for interactivity.
- **Custom Icons:** Font Awesome for consistent iconography.

## 7. How to Use
1. **Register:** Create an account with your details.
2. **Login:** Access your dashboard.
3. **Banking:** Create accounts, deposit/withdraw/transfer funds, view transactions.
4. **Insurance:** Create policies, file claims, view and renew policies.
5. **Profile:** Update your information and change your password.
6. **Notifications:** Stay updated with important events.

## 8. File & Directory Structure Explained

### Project Root
- **run.py**: The main entry point for the Flask application. Initializes the app and database.
- **requirements.txt**: Lists all Python dependencies required for the project.
- **config.py**: Contains configuration classes for different environments (development, testing, production).
- **README.md**: Project overview, setup instructions, and usage guide.
- **.gitignore**: Specifies files and directories to be ignored by Git version control.
- **PROJECT_DOCUMENTATION.docx**: This documentation file.

### Application Package (`app/`)
- **__init__.py**: Initializes the Flask app, extensions, and registers blueprints.
- **models/**: Contains all SQLAlchemy ORM models:
  - `user.py`: User model for authentication and profile data.
  - `banking.py`: Models for bank accounts and transactions.
  - `insurance.py`: Models for insurance policies and claims.
  - `notification.py`: Model for user notifications.
  - `__init__.py`: Imports all models for easy access.
- **routes/**: Contains route handlers (Flask blueprints):
  - `main.py`: Main site routes (home, dashboard, profile, etc.).
  - `auth.py`: Authentication routes (login, register, password reset).
  - `banking.py`: Banking operations (accounts, transactions, transfers).
  - `insurance.py`: Insurance operations (policies, claims, renewals).
  - `api.py`: RESTful API endpoints.
- **forms/**: WTForms classes for all forms:
  - `auth.py`: Login, registration, password forms.
  - `banking.py`: Account, deposit, withdrawal, transfer forms.
  - `insurance.py`: Policy, claim, and filter forms.
  - `__init__.py`: Imports all forms for easy access.
- **utils/**: Utility modules:
  - `error_handlers.py`: Custom error pages and handlers.
  - `api_auth.py`: JWT authentication for API.
  - `email.py`: Email sending utilities.
- **templates/**: Jinja2 HTML templates:
  - `base.html`: Main layout template (navbar, footer, etc.).
  - `main/`, `auth/`, `banking/`, `insurance/`, `errors/`, `email/`: Subfolders for each feature's templates.
- **static/**: Static assets:
  - `css/style.css`: Main stylesheet for custom styles and theming.
  - `js/main.js`: Main JavaScript file for interactivity and UI enhancements.
  - `img/`: Images and icons used in the UI.

### Other Directories
- **migrations/**: Database migration scripts managed by Flask-Migrate/Alembic.
- **tests/**: Unit and integration tests for the application.

## 9. Future Enhancements
- Mobile app version (React Native/Flutter)
- Two-factor authentication (2FA)
- Admin panel for system management
- More payment integrations (Stripe, PayPal)
- AI-based fraud detection
- Multi-language support

## 10. Conclusion
FinSecure is a robust, scalable, and user-friendly platform for managing banking and insurance needs. Its advanced features, secure architecture, and beautiful UI make it suitable for both individuals and businesses.

---

*For more details, refer to the README.md and in-code documentation.* 

## 11. How to Run the Project

1. **Clone the Repository**
   - Download or clone the project to your local machine.

2. **Set Up a Virtual Environment**
   - (Windows)
     ```
     python -m venv venv
     venv\Scripts\activate
     ```
   - (macOS/Linux)
     ```
     python3 -m venv venv
     source venv/bin/activate
     ```

3. **Install Dependencies**
   ```
   pip install -r requirements.txt
   ```

4. **Set Environment Variables**
   - Create a `.env` file or set variables in your shell:
     - `FLASK_APP=run.py`
     - `FLASK_ENV=development`
     - `SECRET_KEY=your_secret_key`
     - (Optional) `DATABASE_URL=sqlite:///site.db`

5. **Initialize the Database**
   ```
   flask db init
   flask db migrate
   flask db upgrade
   ```

6. **Run the Application**
   ```
   flask run
   ```
   - Visit [http://localhost:5000](http://localhost:5000) in your browser.

---

## 12. Website Content Overview

- **Landing Page:** Welcome, features, and call-to-action for login/register.
- **Login/Register:** Secure authentication forms.
- **Dashboard:** Overview of accounts, policies, notifications, and quick actions.
- **Banking:** Manage accounts, view transactions, deposit/withdraw/transfer funds.
- **Insurance:** Manage policies, file/view claims, renew policies.
- **Profile:** Update user info, change password.
- **Notifications:** View important alerts and messages.

---

## 13. How to Use the Website

1. **Register:**  
   - Click “Register” and fill in your details.
2. **Login:**  
   - Enter your credentials to access your dashboard.
3. **Banking:**  
   - Create new accounts, deposit/withdraw/transfer funds, and view transaction history.
4. **Insurance:**  
   - Add new policies, file claims, track claim status, and renew policies.
5. **Profile:**  
   - Update your personal information and change your password.
6. **Notifications:**  
   - Check for important updates and alerts.

---

## 14. Demo User Credentials

- **Demo User:**  
  - Username: `demouser`  
  - Password: `Demo@1234`

- **Admin User:**  
  - Username: `admin`  
  - Password: `Admin@1234`

---

## 15. Admin Features

- Access to all user accounts and data.
- Manage and approve insurance claims.
- View system-wide statistics and reports.
- Send notifications to all users.
- Manage banking and insurance products.

--- 